import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense
from tabulate import tabulate

# ================== LOAD & PREPROCESS ==================
print("ðŸ“Œ Loading and preparing the dataset...")

df = pd.read_csv(r"/content/1602CA19-B224-4CC3-AA31-11B1B124530F.csv")

df['ObservationTime'] = pd.to_datetime(df['ObservationTime'])
df = df.sort_values('ObservationTime')

features = ['AccumulateRainfallInCatchment', 'InflowDischarge']
df = df[features].copy()
df.fillna(method='ffill', inplace=True)

# Summary stats
print("\nðŸ“Š Dataset Summary:")
print(df.describe())

# ================== PIE CHART: Rainfall Contribution ==================
print("\nðŸ§ª Visualizing rainfall contribution...")

last_year = df[-365:]
rain_contribution = [sum(last_year['AccumulateRainfallInCatchment']), sum(df['AccumulateRainfallInCatchment']) - sum(last_year['AccumulateRainfallInCatchment'])]

plt.figure(figsize=(5, 5))
plt.pie(rain_contribution, labels=["Last Year", "Previous Years"], autopct='%1.1f%%', startangle=140)
plt.title("ðŸ’§ Rainfall Contribution Breakdown")
plt.tight_layout()
plt.show()

# ================== NORMALIZE & SEQUENCE ==================
print("\nðŸ”„ Scaling and shaping data for LSTM model...")

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df)

X, y = [], []
for i in range(60, len(scaled_data) - 7):
    X.append(scaled_data[i - 60:i])
    y.append(scaled_data[i:i + 7, 1])

X = np.array(X)
y = np.array(y)

# ================== LSTM MODEL ==================
print("\nðŸ”§ Training LSTM model for inflow prediction...")

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], X.shape[2])))
model.add(LSTM(50))
model.add(Dense(7))
model.compile(optimizer='adam', loss='mse')
model.fit(X, y, epochs=25, batch_size=32, verbose=0)
print("âœ… LSTM model trained.")

# ================== FORECASTING ==================
print("\nðŸ”® Predicting inflow for the next 7 days...")

last_60 = scaled_data[-60:]
last_60 = np.expand_dims(last_60, axis=0)
predicted_scaled = model.predict(last_60)[0]

dummy = np.zeros((7, len(features)))
inflow_index = features.index('InflowDischarge')
dummy[:, inflow_index] = predicted_scaled
predicted_inflow = scaler.inverse_transform(dummy)[:, inflow_index]

forecast_table = [[f"Day {i+1}", f"{predicted_inflow[i]:.2f} mÂ³/s"] for i in range(7)]
print("\nðŸ”¢ Forecasted Inflow (Next 7 Days):")
print(tabulate(forecast_table, headers=["Day", "Inflow Prediction"], tablefmt="fancy_grid"))

# ================== BAR CHART: Forecast ==================
plt.figure(figsize=(8, 4))
plt.bar([f'Day {i+1}' for i in range(7)], predicted_inflow, color='skyblue')
plt.title("ðŸ”® 7-Day Forecasted Inflow (mÂ³/s)")
plt.ylabel("Inflow (mÂ³/s)")
plt.xlabel("Day")
plt.tight_layout()
plt.show()

# ================== GENETIC ALGORITHM ==================
print("\nðŸ§  Optimizing outflow using Genetic Algorithm...")

total_available = sum(predicted_inflow)

def fitness(schedule):
    penalty = abs(sum(schedule) - total_available)
    smoothness = sum([abs(schedule[i] - schedule[i - 1]) for i in range(1, len(schedule))])
    return -(penalty + 0.5 * smoothness)

population = [[random.uniform(0, total_available / 7) for _ in range(7)] for _ in range(100)]

for generation in range(50):
    population.sort(key=fitness, reverse=True)
    parents = population[:10]
    children = []
    for _ in range(90):
        p1, p2 = random.sample(parents, 2)
        child = [(a + b) / 2 for a, b in zip(p1, p2)]
        child[random.randint(0, 6)] += random.uniform(-5, 5)
        children.append(child)
    population = parents + children

best_schedule = max(population, key=fitness)

schedule_table = [[f"Day {i+1}", f"{best_schedule[i]:.2f} mÂ³/s"] for i in range(7)]
print("\nâœ… Optimized Outflow Schedule:")
print(tabulate(schedule_table, headers=["Day", "Outflow Plan"], tablefmt="fancy_grid"))

# ================== LINE CHART: Inflow vs Outflow ==================
plt.figure(figsize=(10, 5))
days = [f'Day {i+1}' for i in range(7)]
plt.plot(days, predicted_inflow, label='Predicted Inflow', marker='o', linestyle='-', color='blue')
plt.plot(days, best_schedule, label='Optimized Outflow', marker='x', linestyle='--', color='green')
plt.title("ðŸ“ˆ Forecasted Inflow vs Optimized Outflow")
plt.xlabel("Day")
plt.ylabel("Discharge (mÂ³/s)")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# ================== LINEPLOT: 30-Day Historical Trends ==================
print("\nðŸ“‰ Visualizing historical trends...")

plt.figure(figsize=(12, 5))
sns.lineplot(data=df[-30:], x=df.index[-30:], y='AccumulateRainfallInCatchment', label='Rainfall')
sns.lineplot(data=df[-30:], x=df.index[-30:], y='InflowDischarge', label='Inflow')
plt.title("ðŸ“Š Last 30 Days: Rainfall vs Inflow")
plt.xlabel("Days")
plt.ylabel("Volume")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# ================== HEATMAP: Correlation ==================
plt.figure(figsize=(6, 4))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("ðŸ“Š Feature Correlation Heatmap")
plt.tight_layout()
plt.show()
